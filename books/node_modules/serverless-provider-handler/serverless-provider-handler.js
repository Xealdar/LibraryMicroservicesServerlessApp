const R = require('ramda');

const awsSpecific_ = fn =>
  R.pipe(
    R.prop('body'),
    JSON.parse,
    fn,
    x => Promise.resolve(x),
    R.then(JSON.stringify),
    R.then(
      R.applySpec({
        status: R.always(200),
        body: R.identity
      })
    )
  );

const kubelessSpecific_ = fn =>
  R.pipe(
    R.prop('data'),
    fn,
    x => Promise.resolve(x)
  );

const parseBody = R.pipe(
  R.prop('body'),
  JSON.parse,
);


const serverlessHandler = fn => 
  R.pipe(
    
    //R.tap(R.prop('queryStringParameters')),
    //R.tap(console.log),
    R.cond([
      [R.propEq('httpMethod', 'POST'), parseBody],
      [R.propEq('httpMethod', 'GET'), R.prop('queryStringParameters')],
      [R.propEq('httpMethod', 'DELETE'), R.prop('queryStringParameters')], 
      [R.T, R.always({error: 'Provider not handled'})]
    ]),
    fn,
    x => Promise.resolve(x),
    R.then(JSON.stringify),
    R.then(
      R.applySpec({
        status: R.always(200),
        body: R.identity
      })
    )
  );

  



  

module.exports= {
  serverlessHandler
};